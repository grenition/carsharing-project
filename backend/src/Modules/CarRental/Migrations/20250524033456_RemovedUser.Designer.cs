// <auto-generated />
using System;
using CarRental.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRental.Migrations
{
    [DbContext(typeof(CarRentalDbContext))]
    [Migration("20250524033456_RemovedUser")]
    partial class RemovedUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("CarRental.Domain.Models.CarModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentMileage")
                        .HasColumnType("INTEGER");

                    b.Property<float>("FuelLevel")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("LastServiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarRental.Domain.Models.PaymentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("RentalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RentalId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CarRental.Domain.Models.RentalModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CarId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("CarRental.Domain.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CarRental.Domain.Models.CarModel", b =>
                {
                    b.OwnsOne("CarRental.Domain.Values.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("CarModelId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<double>("Latitude")
                                .HasColumnType("REAL");

                            b1.Property<double>("Longitude")
                                .HasColumnType("REAL");

                            b1.HasKey("CarModelId");

                            b1.ToTable("Cars");

                            b1.WithOwner()
                                .HasForeignKey("CarModelId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("CarRental.Domain.Models.PaymentModel", b =>
                {
                    b.HasOne("CarRental.Domain.Models.RentalModel", "Rental")
                        .WithMany()
                        .HasForeignKey("RentalId");

                    b.HasOne("CarRental.Domain.Models.UserModel", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rental");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarRental.Domain.Models.RentalModel", b =>
                {
                    b.HasOne("CarRental.Domain.Models.CarModel", "CarModel")
                        .WithMany("Rentals")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Domain.Models.UserModel", "UserModel")
                        .WithMany("Rentals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CarRental.Domain.Values.Location", "EndLocation", b1 =>
                        {
                            b1.Property<Guid>("RentalModelId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<double>("Latitude")
                                .HasColumnType("REAL");

                            b1.Property<double>("Longitude")
                                .HasColumnType("REAL");

                            b1.HasKey("RentalModelId");

                            b1.ToTable("Rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentalModelId");
                        });

                    b.OwnsOne("CarRental.Domain.Values.Location", "StartLocation", b1 =>
                        {
                            b1.Property<Guid>("RentalModelId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<double>("Latitude")
                                .HasColumnType("REAL");

                            b1.Property<double>("Longitude")
                                .HasColumnType("REAL");

                            b1.HasKey("RentalModelId");

                            b1.ToTable("Rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentalModelId");
                        });

                    b.OwnsOne("CarRental.Domain.Values.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("RentalModelId")
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("RentalModelId");

                            b1.ToTable("Rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentalModelId");
                        });

                    b.Navigation("CarModel");

                    b.Navigation("EndLocation");

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("StartLocation")
                        .IsRequired();

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("CarRental.Domain.Models.UserModel", b =>
                {
                    b.OwnsOne("CarRental.Domain.Values.DriverLicense", "DriverLicense", b1 =>
                        {
                            b1.Property<Guid>("UserModelId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("ExpirationDate")
                                .HasColumnType("TEXT")
                                .HasColumnName("DriverLicenseExpirationDate");

                            b1.Property<DateTime>("IssuedDate")
                                .HasColumnType("TEXT")
                                .HasColumnName("DriverLicenseIssuedDate");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("DriverLicenseNumber");

                            b1.HasKey("UserModelId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserModelId");
                        });

                    b.Navigation("DriverLicense")
                        .IsRequired();
                });

            modelBuilder.Entity("CarRental.Domain.Models.CarModel", b =>
                {
                    b.Navigation("Rentals");
                });

            modelBuilder.Entity("CarRental.Domain.Models.UserModel", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Rentals");
                });
#pragma warning restore 612, 618
        }
    }
}
